$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 ' addr_i [31:0] $end
  $var wire  1 & byte_op_i $end
  $var wire  1 $ clk_i $end
  $var wire 32 ) rd_o [31:0] $end
  $var wire 32 ( wd_i [31:0] $end
  $var wire  1 % we_i $end
  $scope module data_memory $end
   $var wire 32 + ADDRESS_WIDTH [31:0] $end
   $var wire 32 - BYTE_WIDTH [31:0] $end
   $var wire 32 , DATA_WIDTH [31:0] $end
   $var wire 32 / END_ADDRESS [31:0] $end
   $var wire 32 . START_ADDRESS [31:0] $end
   $var wire 32 * addr [31:0] $end
   $var wire 32 ' addr_i [31:0] $end
   $var wire  1 & byte_op_i $end
   $var wire  1 $ clk_i $end
   $var wire 32 ) rd_o [31:0] $end
   $var wire 32 ( wd_i [31:0] $end
   $var wire  1 % we_i $end
   $scope module unnamedblk1 $end
    $var wire 32 # i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
1$
0%
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000101 +
b00000000000000000000000000100000 ,
b00000000000000000000000000001000 -
b00000000000000010000000000000000 .
b00000000000000011111111111111111 /
#1
b00000000000000010000000000000000 #
0$
#2
1$
1%
b00000000000000010000000000000101 '
b00000000000000000000000011001101 (
b10111001000110000001101001010000 )
b00000000000000010000000000000100 *
#3
0$
b00000000000000000000000011001101 )
#4
1$
0%
b00000000000000000000000011011111 (
#5
0$
#6
1$
b00000000000000010000000000000111 '
b00000000000000000000000011101010 (
#7
0$
#8
1$
1&
b00000000000000010000000000000100 '
b00000000000000000000000010111011 (
#9
0$
#10
1$
1%
0&
b00000000000000010000000000000110 '
b00000000000000000000000010100101 (
#11
0$
b00000000000000000000000010100101 )
#12
1$
1&
b00000000000000010000000000000111 '
b00000000000000000000000000111101 (
b00000000000000000000000000000000 )
b00000000000000010000000000000111 *
#13
0$
b00000000000000000000000000111101 )
#14
1$
0&
b00000000000000010000000000000010 '
b00000000000000000000000000010010 (
b00111100010011110100001001010101 )
b00000000000000010000000000000000 *
#15
0$
b00000000000000000000000000010010 )
#16
1$
0%
1&
b00000000000000010000000000000110 '
b00000000000000000000000010011101 (
b00000000000000000000000000000000 )
b00000000000000010000000000000110 *
#17
0$
#18
1$
1%
b00000000000000000000000001001010 (
#19
0$
b00000000000000000000000001001010 )
#20
1$
b00000000000000010000000000000100 '
b00000000000000000000000001011110 (
b00000000000000000000000010100101 )
b00000000000000010000000000000100 *
#21
0$
b00000000000000000000000001011110 )
#22
1$
0&
b00000000000000000000000010110011 (
b00111101010010100000000001011110 )
#23
0$
b00000000000000000000000010110011 )
#24
1$
0%
b00000000000000000000000001110010 (
#25
0$
#26
1$
1%
1&
b00000000000000010000000000000101 '
b00000000000000000000000001101111 (
b00000000000000000000000000000000 )
b00000000000000010000000000000101 *
#27
0$
b00000000000000000000000001101111 )
#28
1$
0%
b00000000000000010000000000000111 '
b00000000000000000000000000100101 (
b00000000000000000000000000000000 )
b00000000000000010000000000000111 *
#29
0$
#30
1$
1%
0&
b00000000000000000000000000100011 (
b00000000000000000110111110110011 )
b00000000000000010000000000000100 *
#31
0$
b00000000000000000000000000100011 )
#32
1$
0%
1&
b00000000000000010000000000000100 '
b00000000000000000000000010101000 (
#33
0$
#34
1$
b00000000000000010000000000000001 '
b00000000000000000000000001100101 (
b00000000000000000000000000000000 )
b00000000000000010000000000000001 *
#35
0$
#36
1$
1%
b00000000000000010000000000000110 '
b00000000000000000000000011001011 (
b00000000000000010000000000000110 *
#37
0$
b00000000000000000000000011001011 )
#38
1$
0%
b00000000000000010000000000000000 '
b00000000000000000000000010111111 (
b00000000000000000000000000010010 )
b00000000000000010000000000000000 *
#39
0$
