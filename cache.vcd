$version Generated by VerilatedVcd $end
$date Fri Dec 15 00:00:50 2023 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 = address_i [31:0] $end
  $var wire  1 < byte_op_i $end
  $var wire  1 ; cache_enable_i $end
  $var wire  1 9 clk_i $end
  $var wire 32 ? read_data_o [31:0] $end
  $var wire 32 > write_data_i [31:0] $end
  $var wire  1 : write_enable_i $end
  $scope module cache $end
   $var wire 32 = address_i [31:0] $end
   $var wire  1 < byte_op_i $end
   $var wire  1 ; cache_enable_i $end
   $var wire  1 9 clk_i $end
   $var wire 32 = mem_address [31:0] $end
   $var wire  1 4 mem_byte_op $end
   $var wire 32 2 mem_incoming_data [31:0] $end
   $var wire 32 3 mem_write_data [31:0] $end
   $var wire  1 : mem_write_enable $end
   $var wire 32 ? read_data_o [31:0] $end
   $var wire 32 > write_data_i [31:0] $end
   $var wire  1 : write_enable_i $end
   $scope module line $end
    $var wire 32 = address_i [31:0] $end
    $var wire  1 < byte_op_i $end
    $var wire  2 A byteoffset [1:0] $end
    $var wire 32 % cache_data[0] [31:0] $end
    $var wire 32 & cache_data[1] [31:0] $end
    $var wire 32 ' cache_data[2] [31:0] $end
    $var wire 32 ( cache_data[3] [31:0] $end
    $var wire  1 ; cache_enable_i $end
    $var wire 30 ) cache_tag[0] [29:0] $end
    $var wire 30 * cache_tag[1] [29:0] $end
    $var wire 30 + cache_tag[2] [29:0] $end
    $var wire 30 , cache_tag[3] [29:0] $end
    $var wire  1 9 clk_i $end
    $var wire  2 1 counter [1:0] $end
    $var wire  1 5 hit $end
    $var wire 32 = mem_address_o [31:0] $end
    $var wire  1 4 mem_byte_op_o $end
    $var wire 32 2 mem_incoming_data_i [31:0] $end
    $var wire 32 3 mem_write_data_o [31:0] $end
    $var wire  1 : mem_write_enable_o $end
    $var wire 32 ? read_data_o [31:0] $end
    $var wire 30 @ tag [29:0] $end
    $var wire 32 C tag_bits [31:0] $end
    $var wire  1 - valid[0] $end
    $var wire  1 . valid[1] $end
    $var wire  1 / valid[2] $end
    $var wire  1 0 valid[3] $end
    $var wire  2 6 wayhit [1:0] $end
    $var wire 32 B width [31:0] $end
    $var wire 32 > write_data_i [31:0] $end
    $var wire  1 : write_enable_i $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 7 i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module memory $end
    $var wire 32 D BYTE_WIDTH [31:0] $end
    $var wire 32 B DATA_WIDTH [31:0] $end
    $var wire 32 F END_ADDRESS [31:0] $end
    $var wire 32 E START_ADDRESS [31:0] $end
    $var wire 32 8 addr [31:0] $end
    $var wire 32 = addr_i [31:0] $end
    $var wire  1 4 byte_op_i $end
    $var wire  1 9 clk_i $end
    $var wire 32 2 rd_o [31:0] $end
    $var wire 32 3 wd_i [31:0] $end
    $var wire  1 : we_i $end
    $scope module unnamedblk1 $end
     $var wire 32 $ i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b000000000000000000000000000000 )
b000000000000000000000000000000 *
b000000000000000000000000000000 +
b000000000000000000000000000000 ,
0-
0.
0/
00
b00 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
04
05
b00 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
0:
0;
0<
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b000000000000000000000000000000 @
b00 A
b00000000000000000000000000100000 B
b00000000000000000000000000011110 C
b00000000000000000000000000001000 D
b00000000000000000000000000000000 E
b00000000000000011111111111111111 F
#1
b00000000000000000000000000000100 #
b11010101110111111110011111001001 2
19
#2
09
#3
19
#4
09
#5
19
#6
09
#7
19
#8
09
1:
1;
b00000000000000000000000000100000 =
b00000000000000000000000000111011 >
b000000000000000000000000001000 @
#9
b11000001101010001010100111010001 2
b00000000000000000000000000111011 3
b00000000000000000000000000000100 7
b00000000000000000000000000100000 8
19
#10
b00000000000000000000000000111011 %
b000000000000000000000000001000 )
1-
b01 1
b00000000000000000000000000111011 2
15
b00000000000000000000000000000000 7
09
b00000000000000000000000001100000 =
b00000000000000000000000000111000 >
b000000000000000000000000011000 @
#11
b00111001001101100011101101000011 2
b00000000000000000000000000111000 3
05
b00000000000000000000000000000100 7
b00000000000000000000000001100000 8
19
#12
b00000000000000000000000000111000 &
b000000000000000000000000011000 *
1.
b10 1
b00000000000000000000000000111000 2
15
b01 6
b00000000000000000000000000000001 7
09
1<
b00000000000000000000010011010001 =
b00000000000000000000000001111011 >
b000000000000000000000100110100 @
b01 A
#13
b00000000000000000000000010010111 2
b00000000000000000000000001111011 3
14
05
b00000000000000000000000000000100 7
b00000000000000000000010011010001 8
19
#14
b00000000000000000111101100000000 '
b000000000000000000000100110100 +
1/
b11 1
b00000000000000000000000001111011 2
15
b10 6
b00000000000000000000000000000010 7
09
0;
#15
19
#16
09
#17
19
#18
09
#19
19
#20
09
#21
19
#22
09
#23
19
#24
09
#25
19
#26
09
#27
19
#28
09
#29
19
#30
09
#31
19
#32
09
#33
19
#34
09
#35
19
#36
09
#37
19
#38
09
#39
19
#40
09
#41
19
#42
09
#43
19
#44
09
#45
19
#46
09
#47
19
#48
09
#49
19
#50
09
#51
19
#52
09
#53
19
#54
09
#55
19
#56
09
#57
19
#58
09
#59
19
#60
09
#61
19
#62
09
#63
19
#64
09
#65
19
#66
09
#67
19
#68
09
#69
19
#70
09
#71
19
#72
09
#73
19
#74
09
#75
19
#76
09
#77
19
#78
09
#79
19
#80
09
#81
19
#82
09
#83
19
#84
09
#85
19
#86
09
#87
19
#88
09
#89
19
#90
09
#91
19
#92
09
#93
19
#94
09
#95
19
#96
09
#97
19
#98
09
#99
19
